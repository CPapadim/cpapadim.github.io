{"name":"Cpapadim.GitHub.io","tagline":"","body":"### Hello, I'm Harry.\r\nI'm a quantitative storyteller.  I enjoy taking strings of words in the form of questions, turning them into numbers and math, using data to find quantitative answers, and finally turning those quantitative answers into compelling stories.\r\n\r\nOn this page you will find a few examples of some of the projects I've worked on. \r\n\r\n### Signal Processing Package\r\nIn order to tell truly compelling stories about data a storyteller often needs to create customized storytelling tools.  I wrote this package to help me tell stories about how brains work.  It can analyze time series of action potentials and local field potentials from the brain in both the frequency and time domains to help users uncover how these different brain signals relate to each other and contribute to driving behavior.  \r\n\r\n[Signal Processing Toolkit](https://github.com/CPapadim/Signal-Processing-Toolkit)\r\n\r\nThis tool is now being used by a new generation of upcoming scientists in the Snyder Laboratory. \r\n\r\n### Computational Modeling and Machine Learning\r\n##Neural Networks\r\nI have implemented and used artificial neural networks to answer many interesting questions and tell many fascinating stories.  Below are some examples of artificial neural networks I've built and used.  \r\n\r\n#Continuous Attractor Recurrent Neural Network\r\nHow does the brain remember locations in space?  I built this artificial neural network to model how information may be remembered.  The network uses recurrent connectivity to maintain the memory of an object even after that object has been removed from the network inputs.\r\n\r\n[Continuous Attractor Recurrent Neural Network](https://github.com/CPapadim/Continuous-Attractor-Neural-Network)\r\n\r\nI've used this model to test a number of theories of how working memories are stored and transformed.  \r\n\r\n# Artificial Neural Network with Backpropagation\r\nHow does your brain compute the trajectory your arm must move in order to reach an object?  It has to take into account where your eyes are looking, where your hand is now, and where the object is.   First, it needs to calculate the distance between your hand is and where your eyes are looking.  We found that to perform this computation the brain uses the response gain of neurons - by making the gain of eye position and hand position equal and opposite.\r\n\r\nI built the neural network model below to model these findings,  The network can learn how to compute the reaching to objects in space through training on a set of training data of objects and reaches.  When we examine the neurons in the network we find that, like what we see in the actual brain, the artificial neural network uses the response gain of neurons to compute the distance between the eye position and the hand position.  \r\n\r\n[Artificial Neural Network with Backpropagation](https://github.com/CPapadim/Neural-Network-with-Back-Propagation)\r\n\r\n##Fun Projects\r\n\r\n#League Coach \r\nThe game League of Legends is a competitive sports-like team game.  When I started playing this game I noticed that it does not have an easy, intuitive way to 'keep score'.  The team that is ahead is determined by many factors.  I decided to do something about that.  I created a new measure, the 'probability to win'.  This measure takes into account all of the relevant factors, and condenses them into the single, intuitive measure.  \r\n\r\nIt works by first training a Random Forest Classifier that is trained on ~250,000 games.  It is trained on all of the complicated features that define the state of each game.  The model makes a prediction on whether a team will win after looking at all the features.  The more confident the model is that a team will win, the higher the 'probability to win' metric will be.  The model can make this prediction at any point in time during the game.\r\n\r\nYou can try it out by clicking the following link and typing 'Juryiel' as the player name (or use your own player if you play :) )\r\n\r\n[Random Forest Classifier Model](http://league-coach.net/gsinput)\r\n\r\nThe web app also has another function.  It can give advice to novice players by analyzing their most recent games.  It uses an event-triggered average of player behaviors to determine what good players are doing before and after game-critical events.  It then compares user teams to these metrics and gives them advice on how to improve.\r\n\r\nYou can try it out by clicking the following link and typing 'Juryiel' as the player name.  \r\n\r\n[Game Analysis and Advice](http://league-coach.net/coachinput)\r\n\r\n#Music Classification\r\n\r\nPeople have used all sorts of cool methods to analyze music, from spectrograms to Recurrent Neural Networks.  I wanted to play with a different method.  I thought that music may be thought of as a language, so I used a model that makes use of Latent Dirichlet Allocation to extract 'topics' from songs, and use these topics to determine what song a short song-sample came from, and what composer wrote the song.  It worked surprisingly well!\r\n\r\n[Music Classification](https://github.com/CPapadim/Music-Classification)\r\n\r\n###Experimental Design\r\n\r\nIn order to tell a good story you have to do the right experiment.  Here is a document from one of my experimental designs to study working memory.  This design won a highly competitive N.R.S.A grant (~$150,000 in funding) from the National Institutes of Health.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}